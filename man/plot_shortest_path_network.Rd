% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shortest_paths.R
\name{plot_shortest_path_network}
\alias{plot_shortest_path_network}
\title{Plot Shortest Path Network}
\usage{
plot_shortest_path_network(
  napistu_list,
  shortest_paths_list,
  max_labeled_species = 10L,
  network_layout = "fr",
  edge_weights = NULL
)
}
\arguments{
\item{napistu_list}{A list containing loaded assets and bindings to
  Python modules.

\describe{
    \item{sbml_dfs}{
        SBML_dfs - the core pathway representation of the Napistu Python library
        }
    \item{napistu_graph}{
        Network graph - a Python igraph subclass with Napistu-specific
        attributes and methods
        }
    \item{species_identifiers}{Species identifier mappings}
    \item{precomputed_distances}{optional, distances between species nodes}
    \item{species_names}{
         A tibble containing the names of all genes, proteins, molecules, etc
         }
    \item{identifiers_nest}{
         A tibble with one row per ontology and a nested tibble containing
         all the identifiers and their corresponding molecular species
         }
    \item{python_modules}{A named list of Python modules: `napistu`}
    \item{python_environment}{See \link{validate_python_environment}}
    \item{napistu_config}{
        A `napistu_config` object dictating how the `napistu_list` was initialized
    }
    \item{loaded_at}{A date-time object indicating when `napistu_list` was initialized}
  }}

\item{shortest_paths_list}{results from napistu$network$find_all_shortest_reaction_paths}

\item{max_labeled_species}{maximum number of species to label (to avoid overplotting)}

\item{network_layout}{method to used for creating a network layout (e.g., `fr`, `kk`, `drl`)}

\item{edge_weights}{Numeric vector of edge weights, character string naming an edge attribute,
NULL to use graph's "weight" attribute, or NA to explicitly use no weights}
}
\description{
Plot Shortest Path Network
}
\examples{
# NOTE - you may have to run this a few times to find a valid path between 2 random nodes
setup_napistu_list(create_napistu_config())
sbml_dfs <- napistu_list$sbml_dfs
napistu_graph <- napistu_list$napistu_graph
napistu <- napistu_list$python_modules$napistu
source_species_id <- random_species(napistu_list)
dest_species_id <- random_species(napistu_list)

target_species_paths <- napistu$network$ng_utils$compartmentalize_species_pairs(
    sbml_dfs,
    source_species_id,
    dest_species_id
)

shortest_paths_list <- try(napistu$network$paths$find_all_shortest_reaction_paths(
    napistu_graph,
    sbml_dfs,
    target_species_paths,
    weight_var = "weight"
), silent = TRUE)

if (!("try-error" \%in\% class(shortest_paths_list))) {
    plot_shortest_path_network(
        napistu_list,
        shortest_paths_list,
        max_labeled_species = 10L
    )
}
}
